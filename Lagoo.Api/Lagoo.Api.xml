<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lagoo.Api</name>
    </assembly>
    <members>
        <member name="T:Lagoo.Api.Common.Extensions.AuthServiceCollectionExtensions">
            <summary>
              Authentication and Authorization extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="T:Lagoo.Api.Common.Extensions.AutoGeneratedApiServiceCollectionExtensions">
            <summary>
              Auto generated API extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="T:Lagoo.Api.Common.Extensions.CustomCorsServiceCollectionExtensions">
            <summary>
              Custom CORS extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="T:Lagoo.Api.Common.Extensions.CustomExceptionHandlerAppBuilderExtensions">
            <summary>
              Custom exception handler extenstion method for <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/>
            </summary>
        </member>
        <member name="T:Lagoo.Api.Common.JsonTools.CustomDateTimeConverter">
            <summary>
              Converter of <see cref="T:System.DateTime"/> for keeping all of them in UTC
              in communication between a server and client
            </summary>
        </member>
        <member name="T:Lagoo.Api.Common.Middlewares.CustomExceptionHandlerMiddleware">
            <summary>
              A middleware for appropriate handling of thrown custom exceptions in the app
            </summary>
        </member>
        <member name="T:Lagoo.Api.Controllers.AccountsController">
            <summary>
              The accounts controller
            </summary>
        </member>
        <member name="M:Lagoo.Api.Controllers.AccountsController.RegisterUser(Lagoo.BusinessLogic.CommandsAndQueries.Accounts.Commands.RegisterUser.RegisterUserCommand)">
            <summary>
              Register a user in the app, optionally via an external authentication
            </summary>
            <param name="command">User data for registration</param>
            <returns>Access and Refresh tokens with their expiration dates, device ID</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.AccountsController.LoginUser(Lagoo.BusinessLogic.CommandsAndQueries.Accounts.Commands.LoginUser.LoginUserCommand)">
            <summary>
              Login a user in the app
            </summary>
            <param name="command">User data to login in the app</param>
            <returns>Access and Refresh tokens with their expiration dates, device ID</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.AccountsController.LoginUserViaExternalAuthService(Lagoo.BusinessLogic.CommandsAndQueries.Accounts.Commands.LoginUserViaExternalService.LoginUserViaExternalServiceCommand)">
            <summary>
              Login a user via any supported external authentication service
            </summary>
            <param name="command">External authentication service, its access token and an optional refresh token if exists on a device</param>
            <returns>Access and Refresh tokens with their expiration dates, device ID</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.AccountsController.GetExternalAuthServiceUserInfo(Lagoo.BusinessLogic.CommandsAndQueries.Accounts.Queries.GetExternalAuthServiceUserInfo.GetExternalAuthServiceUserInfoQuery)">
            <summary>
              Get user information from specified external authentication service
            </summary>
            <param name="query">External authentication service and access token to it</param>
            <returns>User info from specified external authentication service</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.AccountsController.RefreshAccessToken(Lagoo.BusinessLogic.CommandsAndQueries.Accounts.Commands.RefreshAccessToken.RefreshAccessTokenCommand)">
            <summary>
              Refresh access token using refresh token for further access to guarded endpoints
            </summary>
            <param name="command">Expired Access token and Refresh token</param>
            <returns>New Access token</returns>
        </member>
        <member name="T:Lagoo.Api.Controllers.ApiController">
            <summary>
              The base controller for others
            </summary>
        </member>
        <member name="T:Lagoo.Api.Controllers.EventsController">
            <summary>
              The events controller
            </summary>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.GetEvents(Lagoo.BusinessLogic.CommandsAndQueries.Events.Queries.GetEvents.GetEventsQuery)">
            <summary>
              Get events with optionally specified filtration, sorting and pagination
            </summary>
            <param name="query">Optional parameters for filtration, sorting and pagination</param>
            <returns>Events and their count, or throws in case of invalid parameters</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.GetEvent(Lagoo.BusinessLogic.CommandsAndQueries.Events.Queries.GetEvent.GetEventQuery)">
            <summary>
              Get an event by specified ID
            </summary>
            <param name="query">ID of an event</param>
            <returns>Requested event or not found response</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.CreateEvent(Lagoo.BusinessLogic.CommandsAndQueries.Events.Commands.CreateEvent.CreateEventCommand)">
            <summary>
              Create an event
            </summary>
            <param name="command">Properties for creating an event</param>
            <returns>New event DTO with some default data from database or throws in case of validation failures</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.UpdateEvent(System.Int64,Lagoo.BusinessLogic.CommandsAndQueries.Events.Commands.UpdateEvent.UpdateEventCommand)">
            <summary>
              Update an event with the given ID
            </summary>
            <param name="eventId">ID of needful event</param>
            <param name="command">Updated event properties</param>
            <returns>Updated event DTO or throws in case of validation failures or wrong event ID</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.UpdateEventPartially(System.Int64,Lagoo.BusinessLogic.CommandsAndQueries.Events.Commands.UpdateEventPartially.UpdateEventPartiallyCommand)">
            <summary>
              Update an event with the given ID partially
            </summary>
            <param name="eventId">ID of needful event</param>
            <param name="command">Some updated event properties</param>
            <returns>Updated event DTO or throws in case of validation failures or wrong event ID</returns>
        </member>
        <member name="M:Lagoo.Api.Controllers.EventsController.DeleteEvent(Lagoo.BusinessLogic.CommandsAndQueries.Events.Commands.DeleteEvent.DeleteEventCommand)">
            <summary>
              Delete an event with the given ID
            </summary>
            <param name="command">ID of needful event</param>
        </member>
    </members>
</doc>
